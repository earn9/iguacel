{"version":3,"sources":["exp/Exp13.js","../node_modules/threejs-meshline/src/index.js"],"names":["extend","meshline","Rig","mouse","camera","useThree","useFrame","position","x","current","y","lookAt","colors","BgLine","color","lineWidth","material","useRef","attach","vertices","vertex","opacity","ref","transparent","depthTest","THREE","AnimatedLine","speed","uniforms","dashOffset","value","dashArray","dashRatio","Lines","count","useMemo","Array","fill","map","_","i","Math","max","random","props","index","key","useState","bgColor","setBgColor","onClick","rando","parseInt","length","opacityRando","chroma","alpha","hex","changeBg","style","display","justifyContent","alignItems","flexFlow","width","height","cursor","background","near","far","fov","onMouseMove","e","clientX","window","innerWidth","clientY","innerHeight","this","require","Error","MeshLine","BufferGeometry","call","type","positions","previous","next","side","indices_array","uvs","counters","_vertices","_bufferArray","widthCallback","matrixWorld","Matrix4","Object","defineProperties","geometry","enumerable","get","set","setFromGeometry","setVertices","bufferArray","setBufferArray","MeshLineRaycast","raycaster","intersects","inverseMatrix","ray","Ray","sphere","Sphere","interRay","Vector3","copy","boundingSphere","applyMatrix4","intersectSphere","getInverse","vStart","vEnd","interSegment","step","LineSegments","attributes","indices","array","widths","l","a","b","fromArray","undefined","floor","precision","linePrecision","precisionSq","distanceSqToSegment","distance","origin","distanceTo","push","point","clone","face","faceIndex","object","memcpy","src","srcOffset","dst","dstOffset","subarray","slice","buffer","MeshLineMaterial","parameters","ShaderMaterial","assign","UniformsLib","fog","useMap","alphaMap","useAlphaMap","Color","resolution","Vector2","sizeAttenuation","useDash","visibility","alphaTest","repeat","vertexShader","ShaderChunk","meshline_vert","fragmentShader","meshline_frag","setValues","prototype","create","constructor","isMeshLine","setMatrixWorld","g","c","Geometry","getAttribute","Float32Array","setGeometry","vts","wcb","j","v","z","process","ba","raycast","compareV3","aa","ab","copyV3","w","n","_attributes","copyArray","needsUpdate","uv","Uint16Array","BufferAttribute","addAttribute","setIndex","computeBoundingSphere","computeBoundingBox","advance","logdepthbuf_pars_vertex","fog_pars_vertex","logdepthbuf_vertex","fog_vertex","join","fog_pars_fragment","logdepthbuf_pars_fragment","logdepthbuf_fragment","fog_fragment","isMeshLineMaterial","source","module","exports"],"mappings":"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","file":"static/js/15.b0c3ab80.chunk.js","sourcesContent":["import React, { useState, useMemo, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport * as meshline from \"threejs-meshline\";\nimport { extend, Canvas, useFrame, useThree } from \"react-three-fiber\";\nimport chroma from \"chroma-js\";\n\nextend(meshline);\n\nconst Rig = ({ mouse }) => {\n  const { camera } = useThree();\n  useFrame(() => {\n    camera.position.x += (-mouse.current[0] / 50 - camera.position.x) * 0.09;\n    camera.position.y += (mouse.current[1] / 50 - camera.position.y) * 0.09;\n    camera.lookAt(0, 0, 0);\n  });\n  return null;\n};\n\nconst colors = [\n  \"#ECECDE\",\n  \"#F1EDBF\",\n  \"#F7E85A\",\n  \"#F6CF00\",\n  \"#F4AC03\",\n  \"#F2873E\",\n  \"#F16D63\",\n  \"#DB5E83\",\n  \"#B95AA4\",\n  \"#975CA0\",\n  \"#6B5AA5\",\n  \"#4051A7\",\n  \"#223F86\",\n  \"#153755\",\n  \"#0C2A32\",\n  \"#141920\",\n];\n\nconst BgLine = ({ color, lineWidth }) => {\n  const material = useRef();\n\n  // useFrame(() => {\n  //   console.log(material.current.uniforms);\n  // });\n\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={vertex} />\n      <meshLineMaterial\n        opacity={1}\n        attach=\"material\"\n        ref={material}\n        transparent\n        depthTest={false}\n        lineWidth={lineWidth}\n        color={color}\n      />\n    </mesh>\n  );\n};\n\nconst vertex = [new THREE.Vector3(0, -20, 0), new THREE.Vector3(0, 20, 0)];\n\nconst AnimatedLine = ({ color, speed, lineWidth }) => {\n  const material = useRef();\n\n  useFrame(() => {\n    material.current.uniforms.dashOffset.value -= speed;\n  });\n\n  return (\n    <mesh>\n      <meshLine attach=\"geometry\" vertices={vertex} />\n      <meshLineMaterial\n        opacity={0.9}\n        attach=\"material\"\n        ref={material}\n        transparent\n        depthTest={false}\n        lineWidth={lineWidth}\n        color={color}\n        dashArray={0.1}\n        dashRatio={0.9}\n      />\n    </mesh>\n  );\n};\n\nconst Lines = ({ count, lineWidth }) => {\n  const lines = useMemo(\n    () =>\n      new Array(count).fill().map((_, i) => {\n        return {\n          color: colors[i],\n          speed: Math.max(0.0001, 0.0007 * Math.random()),\n        };\n      }),\n    [count]\n  );\n  return lines.map((props, index) => (\n    <AnimatedLine\n      key={`animatedLine${index}`}\n      lineWidth={lineWidth}\n      {...props}\n    />\n  ));\n};\n\nexport default function () {\n  const [bgColor, setBgColor] = useState(\"var(--background-color)\");\n  const mouse = useRef([0, 0]);\n\n  const changeBg = () => {\n    const rando = colors[parseInt(colors.length * Math.random())];\n    const opacityRando = chroma(rando).alpha(0.8).hex();\n    setBgColor(opacityRando);\n  };\n\n  return (\n    <div\n      onClick={() => changeBg()}\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexFlow: \"column\",\n        width: \"100%\",\n        height: \"100vh\",\n        cursor: \"pointer\",\n        background: bgColor,\n      }}\n    >\n      <Canvas\n        camera={{ position: [0, 0, 10], near: 0.01, far: 25, fov: 25 }}\n        onMouseMove={(e) =>\n          (mouse.current = [\n            e.clientX - window.innerWidth / 2,\n            e.clientY - window.innerHeight / 2,\n          ])\n        }\n      >\n        <BgLine color={\"#ECECDE\"} lineWidth={2} />\n\n        <Lines count={colors.length} lineWidth={2} />\n\n        <Rig mouse={mouse} />\n      </Canvas>\n    </div>\n  );\n}\n",";(function() {\n  'use strict'\n\n  var root = this\n\n  var has_require = typeof require !== 'undefined'\n\n  var THREE = root.THREE || (has_require && require('three'))\n  if (!THREE) throw new Error('MeshLine requires three.js')\n\n  function MeshLine() {\n    THREE.BufferGeometry.call(this)\n    this.type = 'MeshLine'\n\n    this.positions = []\n\n    this.previous = []\n    this.next = []\n    this.side = []\n    this.width = []\n    this.indices_array = []\n    this.uvs = []\n    this.counters = []\n    this._vertices = []\n    this._bufferArray = []\n\n    this.widthCallback = null\n\n    // Used to raycast\n    this.matrixWorld = new THREE.Matrix4()\n\n    // to support previous api\n    Object.defineProperties(this, {\n      geometry: {\n        enumerable: true,\n        get: function() {\n          return this\n        },\n        set: function(value) {\n          this.setFromGeometry(value)\n        },\n      },\n      vertices: {\n        enumerable: true,\n        get: function() {\n          return this._vertices\n        },\n        set: function(value) {\n          this.setVertices(value)\n        },\n      },\n      bufferArray: {\n        enumerable: true,\n        get: function() {\n          return this._bufferArray\n        },\n        set: function(value) {\n          this.setBufferArray(value)\n        },\n      },\n    })\n  }\n\n  MeshLine.prototype = Object.create(THREE.BufferGeometry.prototype)\n  MeshLine.prototype.constructor = MeshLine\n  MeshLine.prototype.isMeshLine = true\n\n  MeshLine.prototype.setMatrixWorld = function(matrixWorld) {\n    this.matrixWorld = matrixWorld\n  }\n\n  MeshLine.prototype.setFromGeometry = function(g, c) {\n    if (g instanceof THREE.Geometry) {\n      this.setVertices(g.vertices, c)\n    }\n    if (g instanceof THREE.BufferGeometry) {\n      this.setBufferArray(g.getAttribute('position').array, c)\n    }\n    if (g instanceof Float32Array || g instanceof Array) {\n      // to support previous api\n      this.setBufferArray(g, c)\n    }\n  }\n\n  // to support previous api\n  MeshLine.prototype.setGeometry = function(g, c) {\n    this.setFromGeometry(g, c)\n  }\n\n  MeshLine.prototype.setVertices = function(vts, wcb) {\n    this._vertices = vts\n    this.widthCallback = wcb || this.widthCallback\n    this.positions = []\n    this.counters = []\n    for (var j = 0; j < vts.length; j++) {\n      var v = vts[j]\n      var c = j / vts.length\n      this.positions.push(v.x, v.y, v.z)\n      this.positions.push(v.x, v.y, v.z)\n      this.counters.push(c)\n      this.counters.push(c)\n    }\n    this.process()\n  }\n\n  MeshLine.prototype.setBufferArray = function(ba, wcb) {\n    this._bufferArray = ba\n    this.widthCallback = wcb || this.widthCallback\n    this.positions = []\n    this.counters = []\n    for (var j = 0; j < ba.length; j += 3) {\n      var c = j / ba.length\n      this.positions.push(ba[j], ba[j + 1], ba[j + 2])\n      this.positions.push(ba[j], ba[j + 1], ba[j + 2])\n      this.counters.push(c)\n      this.counters.push(c)\n    }\n    this.process()\n  }\n\n  function MeshLineRaycast(raycaster, intersects) {\n    var inverseMatrix = new THREE.Matrix4()\n    var ray = new THREE.Ray()\n    var sphere = new THREE.Sphere()\n    var interRay = new THREE.Vector3()\n    var geometry = this.geometry\n    // Checking boundingSphere distance to ray\n\n    sphere.copy(geometry.boundingSphere)\n    sphere.applyMatrix4(this.matrixWorld)\n\n    if (raycaster.ray.intersectSphere(sphere, interRay) === false) {\n      return\n    }\n\n    inverseMatrix.getInverse(this.matrixWorld)\n    ray.copy(raycaster.ray).applyMatrix4(inverseMatrix)\n\n    var vStart = new THREE.Vector3()\n    var vEnd = new THREE.Vector3()\n    var interSegment = new THREE.Vector3()\n    var step = this instanceof THREE.LineSegments ? 2 : 1\n    var index = geometry.index\n    var attributes = geometry.attributes\n\n    if (index !== null) {\n      var indices = index.array\n      var positions = attributes.position.array\n      var widths = attributes.width.array\n\n      for (var i = 0, l = indices.length - 1; i < l; i += step) {\n        var a = indices[i]\n        var b = indices[i + 1]\n\n        vStart.fromArray(positions, a * 3)\n        vEnd.fromArray(positions, b * 3)\n        var width = widths[Math.floor(i / 3)] != undefined ? widths[Math.floor(i / 3)] : 1\n        var precision = raycaster.linePrecision + (this.material.lineWidth * width) / 2\n        var precisionSq = precision * precision\n\n        var distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment)\n\n        if (distSq > precisionSq) continue\n\n        interRay.applyMatrix4(this.matrixWorld) //Move back to world space for distance calculation\n\n        var distance = raycaster.ray.origin.distanceTo(interRay)\n\n        if (distance < raycaster.near || distance > raycaster.far) continue\n\n        intersects.push({\n          distance: distance,\n          // What do we want? intersection point on the ray or on the segment??\n          // point: raycaster.ray.at( distance ),\n          point: interSegment.clone().applyMatrix4(this.matrixWorld),\n          index: i,\n          face: null,\n          faceIndex: null,\n          object: this,\n        })\n        // make event only fire once\n        i = l\n      }\n    }\n  }\n  MeshLine.prototype.raycast = MeshLineRaycast\n  MeshLine.prototype.compareV3 = function(a, b) {\n    var aa = a * 6\n    var ab = b * 6\n    return (\n      this.positions[aa] === this.positions[ab] &&\n      this.positions[aa + 1] === this.positions[ab + 1] &&\n      this.positions[aa + 2] === this.positions[ab + 2]\n    )\n  }\n\n  MeshLine.prototype.copyV3 = function(a) {\n    var aa = a * 6\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]]\n  }\n\n  MeshLine.prototype.process = function() {\n    var l = this.positions.length / 6\n\n    this.previous = []\n    this.next = []\n    this.side = []\n    this.width = []\n    this.indices_array = []\n    this.uvs = []\n\n    var w\n\n    var v\n    // initial previous points\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2)\n    } else {\n      v = this.copyV3(0)\n    }\n    this.previous.push(v[0], v[1], v[2])\n    this.previous.push(v[0], v[1], v[2])\n\n    for (var j = 0; j < l; j++) {\n      // sides\n      this.side.push(1)\n      this.side.push(-1)\n\n      // widths\n      if (this.widthCallback) w = this.widthCallback(j / (l - 1))\n      else w = 1\n      this.width.push(w)\n      this.width.push(w)\n\n      // uvs\n      this.uvs.push(j / (l - 1), 0)\n      this.uvs.push(j / (l - 1), 1)\n\n      if (j < l - 1) {\n        // points previous to poisitions\n        v = this.copyV3(j)\n        this.previous.push(v[0], v[1], v[2])\n        this.previous.push(v[0], v[1], v[2])\n\n        // indices\n        var n = j * 2\n        this.indices_array.push(n, n + 1, n + 2)\n        this.indices_array.push(n + 2, n + 1, n + 3)\n      }\n      if (j > 0) {\n        // points after poisitions\n        v = this.copyV3(j)\n        this.next.push(v[0], v[1], v[2])\n        this.next.push(v[0], v[1], v[2])\n      }\n    }\n\n    // last next point\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1)\n    } else {\n      v = this.copyV3(l - 1)\n    }\n    this.next.push(v[0], v[1], v[2])\n    this.next.push(v[0], v[1], v[2])\n\n    // redefining the attribute seems to prevent range errors \n    // if the user sets a differing number of vertices\n    if (!this._attributes || this._attributes.position.count !== this.positions.length) {\n      this._attributes = {\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1),\n      }\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions))\n      this._attributes.position.needsUpdate = true\n      this._attributes.previous.copyArray(new Float32Array(this.previous))\n      this._attributes.previous.needsUpdate = true\n      this._attributes.next.copyArray(new Float32Array(this.next))\n      this._attributes.next.needsUpdate = true\n      this._attributes.side.copyArray(new Float32Array(this.side))\n      this._attributes.side.needsUpdate = true\n      this._attributes.width.copyArray(new Float32Array(this.width))\n      this._attributes.width.needsUpdate = true\n      this._attributes.uv.copyArray(new Float32Array(this.uvs))\n      this._attributes.uv.needsUpdate = true\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array))\n      this._attributes.index.needsUpdate = true\n    }\n\n    this.addAttribute('position', this._attributes.position)\n    this.addAttribute('previous', this._attributes.previous)\n    this.addAttribute('next', this._attributes.next)\n    this.addAttribute('side', this._attributes.side)\n    this.addAttribute('width', this._attributes.width)\n    this.addAttribute('uv', this._attributes.uv)\n    this.addAttribute('counters', this._attributes.counters)\n\n    this.setIndex(this._attributes.index)\n\n    this.computeBoundingSphere()\n    this.computeBoundingBox()\n  }\n\n  function memcpy(src, srcOffset, dst, dstOffset, length) {\n    var i\n\n    src = src.subarray || src.slice ? src : src.buffer\n    dst = dst.subarray || dst.slice ? dst : dst.buffer\n\n    src = srcOffset\n      ? src.subarray\n        ? src.subarray(srcOffset, length && srcOffset + length)\n        : src.slice(srcOffset, length && srcOffset + length)\n      : src\n\n    if (dst.set) {\n      dst.set(src, dstOffset)\n    } else {\n      for (i = 0; i < src.length; i++) {\n        dst[i + dstOffset] = src[i]\n      }\n    }\n\n    return dst\n  }\n\n  /**\n   * Fast method to advance the line by one position.  The oldest position is removed.\n   * @param position\n   */\n  MeshLine.prototype.advance = function(position) {\n    var positions = this._attributes.position.array\n    var previous = this._attributes.previous.array\n    var next = this._attributes.next.array\n    var l = positions.length\n\n    // PREVIOUS\n    memcpy(positions, 0, previous, 0, l)\n\n    // POSITIONS\n    memcpy(positions, 6, positions, 0, l - 6)\n\n    positions[l - 6] = position.x\n    positions[l - 5] = position.y\n    positions[l - 4] = position.z\n    positions[l - 3] = position.x\n    positions[l - 2] = position.y\n    positions[l - 1] = position.z\n\n    // NEXT\n    memcpy(positions, 6, next, 0, l - 6)\n\n    next[l - 6] = position.x\n    next[l - 5] = position.y\n    next[l - 4] = position.z\n    next[l - 3] = position.x\n    next[l - 2] = position.y\n    next[l - 1] = position.z\n\n    this._attributes.position.needsUpdate = true\n    this._attributes.previous.needsUpdate = true\n    this._attributes.next.needsUpdate = true\n  }\n\n  THREE.ShaderChunk['meshline_vert'] = [\n    '',\n    THREE.ShaderChunk.logdepthbuf_pars_vertex,\n    THREE.ShaderChunk.fog_pars_vertex,\n    '',\n    'attribute vec3 previous;',\n    'attribute vec3 next;',\n    'attribute float side;',\n    'attribute float width;',\n    'attribute float counters;',\n    '',\n    'uniform vec2 resolution;',\n    'uniform float lineWidth;',\n    'uniform vec3 color;',\n    'uniform float opacity;',\n    'uniform float near;',\n    'uniform float far;',\n    'uniform float sizeAttenuation;',\n    '',\n    'varying vec2 vUV;',\n    'varying vec4 vColor;',\n    'varying float vCounters;',\n    '',\n    'vec2 fix( vec4 i, float aspect ) {',\n    '',\n    '    vec2 res = i.xy / i.w;',\n    '    res.x *= aspect;',\n    '\t vCounters = counters;',\n    '    return res;',\n    '',\n    '}',\n    '',\n    'void main() {',\n    '',\n    '    float aspect = resolution.x / resolution.y;',\n    '',\n    '    vColor = vec4( color, opacity );',\n    '    vUV = uv;',\n    '',\n    '    mat4 m = projectionMatrix * modelViewMatrix;',\n    '    vec4 finalPosition = m * vec4( position, 1.0 );',\n    '    vec4 prevPos = m * vec4( previous, 1.0 );',\n    '    vec4 nextPos = m * vec4( next, 1.0 );',\n    '',\n    '    vec2 currentP = fix( finalPosition, aspect );',\n    '    vec2 prevP = fix( prevPos, aspect );',\n    '    vec2 nextP = fix( nextPos, aspect );',\n    '',\n    '    float w = lineWidth * width;',\n    '',\n    '    vec2 dir;',\n    '    if( nextP == currentP ) dir = normalize( currentP - prevP );',\n    '    else if( prevP == currentP ) dir = normalize( nextP - currentP );',\n    '    else {',\n    '        vec2 dir1 = normalize( currentP - prevP );',\n    '        vec2 dir2 = normalize( nextP - currentP );',\n    '        dir = normalize( dir1 + dir2 );',\n    '',\n    '        vec2 perp = vec2( -dir1.y, dir1.x );',\n    '        vec2 miter = vec2( -dir.y, dir.x );',\n    '        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );',\n    '',\n    '    }',\n    '',\n    '    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;',\n    '    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );',\n    '    normal.xy *= .5 * w;',\n    '    normal *= projectionMatrix;',\n    '    if( sizeAttenuation == 0. ) {',\n    '        normal.xy *= finalPosition.w;',\n    '        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;',\n    '    }',\n    '',\n    '    vec4 offset = vec4( normal.xy * side, 0.0, 1.0 );',\n    '    finalPosition.xy += offset.xy;',\n    '',\n    '    gl_Position = finalPosition;',\n    '',\n    THREE.ShaderChunk.logdepthbuf_vertex,\n    THREE.ShaderChunk.fog_vertex && '    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n    THREE.ShaderChunk.fog_vertex,\n    '}',\n  ].join('\\r\\n')\n\n  THREE.ShaderChunk['meshline_frag'] = [\n    '',\n    THREE.ShaderChunk.fog_pars_fragment,\n    THREE.ShaderChunk.logdepthbuf_pars_fragment,\n    '',\n    'uniform sampler2D map;',\n    'uniform sampler2D alphaMap;',\n    'uniform float useMap;',\n    'uniform float useAlphaMap;',\n    'uniform float useDash;',\n    'uniform float dashArray;',\n    'uniform float dashOffset;',\n    'uniform float dashRatio;',\n    'uniform float visibility;',\n    'uniform float alphaTest;',\n    'uniform vec2 repeat;',\n    '',\n    'varying vec2 vUV;',\n    'varying vec4 vColor;',\n    'varying float vCounters;',\n    '',\n    'void main() {',\n    '',\n    THREE.ShaderChunk.logdepthbuf_fragment,\n    '',\n    '    vec4 c = vColor;',\n    '    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );',\n    '    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;',\n    '    if( c.a < alphaTest ) discard;',\n    '    if( useDash == 1. ){',\n    '        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));',\n    '    }',\n    '    gl_FragColor = c;',\n    '    gl_FragColor.a *= step(vCounters, visibility);',\n    '',\n    THREE.ShaderChunk.fog_fragment,\n    '}',\n  ].join('\\r\\n')\n\n  function MeshLineMaterial(parameters) {\n    THREE.ShaderMaterial.call(this, {\n      uniforms: Object.assign({}, THREE.UniformsLib.fog, {\n        lineWidth: { value: 1 },\n        map: { value: null },\n        useMap: { value: 0 },\n        alphaMap: { value: null },\n        useAlphaMap: { value: 0 },\n        color: { value: new THREE.Color(0xffffff) },\n        opacity: { value: 1 },\n        resolution: { value: new THREE.Vector2(1, 1) },\n        sizeAttenuation: { value: 1 },\n        near: { value: 1 },\n        far: { value: 1 },\n        dashArray: { value: 0 },\n        dashOffset: { value: 0 },\n        dashRatio: { value: 0.5 },\n        useDash: { value: 0 },\n        visibility: { value: 1 },\n        alphaTest: { value: 0 },\n        repeat: { value: new THREE.Vector2(1, 1) },\n      }),\n\n      vertexShader: THREE.ShaderChunk.meshline_vert,\n\n      fragmentShader: THREE.ShaderChunk.meshline_frag,\n    })\n\n    this.type = 'MeshLineMaterial'\n\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.lineWidth.value\n        },\n        set: function(value) {\n          this.uniforms.lineWidth.value = value\n        },\n      },\n      map: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.map.value\n        },\n        set: function(value) {\n          this.uniforms.map.value = value\n        },\n      },\n      useMap: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.useMap.value\n        },\n        set: function(value) {\n          this.uniforms.useMap.value = value\n        },\n      },\n      alphaMap: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.alphaMap.value\n        },\n        set: function(value) {\n          this.uniforms.alphaMap.value = value\n        },\n      },\n      useAlphaMap: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.useAlphaMap.value\n        },\n        set: function(value) {\n          this.uniforms.useAlphaMap.value = value\n        },\n      },\n      color: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.color.value\n        },\n        set: function(value) {\n          this.uniforms.color.value = value\n        },\n      },\n      opacity: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.opacity.value\n        },\n        set: function(value) {\n          this.uniforms.opacity.value = value\n        },\n      },\n      resolution: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.resolution.value\n        },\n        set: function(value) {\n          this.uniforms.resolution.value.copy(value)\n        },\n      },\n      sizeAttenuation: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.sizeAttenuation.value\n        },\n        set: function(value) {\n          this.uniforms.sizeAttenuation.value = value\n        },\n      },\n      near: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.near.value\n        },\n        set: function(value) {\n          this.uniforms.near.value = value\n        },\n      },\n      far: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.far.value\n        },\n        set: function(value) {\n          this.uniforms.far.value = value\n        },\n      },\n      dashArray: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashArray.value\n        },\n        set: function(value) {\n          this.uniforms.dashArray.value = value\n          this.useDash = value !== 0 ? 1 : 0\n        },\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashOffset.value\n        },\n        set: function(value) {\n          this.uniforms.dashOffset.value = value\n        },\n      },\n      dashRatio: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.dashRatio.value\n        },\n        set: function(value) {\n          this.uniforms.dashRatio.value = value\n        },\n      },\n      useDash: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.useDash.value\n        },\n        set: function(value) {\n          this.uniforms.useDash.value = value\n        },\n      },\n      visibility: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.visibility.value\n        },\n        set: function(value) {\n          this.uniforms.visibility.value = value\n        },\n      },\n      alphaTest: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.alphaTest.value\n        },\n        set: function(value) {\n          this.uniforms.alphaTest.value = value\n        },\n      },\n      repeat: {\n        enumerable: true,\n        get: function() {\n          return this.uniforms.repeat.value\n        },\n        set: function(value) {\n          this.uniforms.repeat.value.copy(value)\n        },\n      },\n    })\n\n    this.setValues(parameters)\n  }\n\n  MeshLineMaterial.prototype = Object.create(THREE.ShaderMaterial.prototype)\n  MeshLineMaterial.prototype.constructor = MeshLineMaterial\n  MeshLineMaterial.prototype.isMeshLineMaterial = true\n\n  MeshLineMaterial.prototype.copy = function(source) {\n    THREE.ShaderMaterial.prototype.copy.call(this, source)\n\n    this.lineWidth = source.lineWidth\n    this.map = source.map\n    this.useMap = source.useMap\n    this.alphaMap = source.alphaMap\n    this.useAlphaMap = source.useAlphaMap\n    this.color.copy(source.color)\n    this.opacity = source.opacity\n    this.resolution.copy(source.resolution)\n    this.sizeAttenuation = source.sizeAttenuation\n    this.near = source.near\n    this.far = source.far\n    this.dashArray.copy(source.dashArray)\n    this.dashOffset.copy(source.dashOffset)\n    this.dashRatio.copy(source.dashRatio)\n    this.useDash = source.useDash\n    this.visibility = source.visibility\n    this.alphaTest = source.alphaTest\n    this.repeat.copy(source.repeat)\n\n    return this\n  }\n\n  if (typeof exports !== 'undefined') {\n    if (typeof module !== 'undefined' && module.exports) {\n      exports = module.exports = {\n        MeshLine: MeshLine,\n        MeshLineMaterial: MeshLineMaterial,\n        MeshLineRaycast: MeshLineRaycast,\n      }\n    }\n    exports.MeshLine = MeshLine\n    exports.MeshLineMaterial = MeshLineMaterial\n    exports.MeshLineRaycast = MeshLineRaycast\n  } else {\n    root.MeshLine = MeshLine\n    root.MeshLineMaterial = MeshLineMaterial\n    root.MeshLineRaycast = MeshLineRaycast\n  }\n}.call(this))\n"],"sourceRoot":""}
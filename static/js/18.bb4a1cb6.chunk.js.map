{"version":3,"sources":["exp/Exp15.js"],"names":["style","width","height","display","justifyContent","alignItems","Canvas","draw","canvas","ctx","fillStyle","strokeStyle","strokeRect","fillRect","scale","ratio","window","devicePixelRatio","props","this","getContext","ref","node","React","Component"],"mappings":"oMAEe,qBAIb,OACE,yBACEA,MAAO,CACLC,MAAO,OACPC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGd,kBAACC,EAAD,CACEL,MAdQ,IAeRC,OAdS,IAeTK,KAAM,SAACC,EAAQC,GACbA,EAAIC,UAAY,SAChBD,EAAIE,YAAc,SAClBF,EAAIG,WAAW,EAAG,EAnBZ,IACC,KAmBPH,EAAII,SAAS,GAAI,GAAI,GAAI,S,IAO7BP,E,2MAQJQ,MAAQ,WACN,IAAMC,EAAQC,OAAOC,kBAAoB,EAEzC,EAAKT,OAAOP,MAAQ,EAAKiB,MAAMjB,MAAQc,EACvC,EAAKP,OAAON,OAAS,EAAKgB,MAAMhB,OAASa,EAEzC,EAAKP,OAAOR,MAAMC,MAAlB,UAA6B,EAAKiB,MAAMjB,MAAxC,MACA,EAAKO,OAAOR,MAAME,OAAlB,UAA8B,EAAKgB,MAAMhB,OAAzC,MAEA,EAAKO,IAAIK,MAAMC,EAAOA,I,mFAftBI,KAAKV,IAAMU,KAAKX,OAAOY,WAAW,MAElCD,KAAKL,QACLK,KAAKD,MAAMX,KAAKY,KAAKX,OAAQW,KAAKV,O,+BAe1B,IAAD,SACmBU,KAAKD,MAAvBjB,EADD,EACCA,MAAOC,EADR,EACQA,OACf,OACE,4BACEmB,IAAK,SAACC,GAAD,OAAW,EAAKd,OAASc,GAC9BrB,MAAOA,EACPC,OAAQA,Q,GA1BKqB,IAAMC","file":"static/js/18.bb4a1cb6.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default () => {\n  const WIDTH = 200;\n  const HEIGHT = 200;\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Canvas\n        width={WIDTH}\n        height={HEIGHT}\n        draw={(canvas, ctx) => {\n          ctx.fillStyle = \"tomato\";\n          ctx.strokeStyle = \"tomato\";\n          ctx.strokeRect(0, 0, WIDTH, HEIGHT);\n          ctx.fillRect(20, 20, 20, 20);\n        }}\n      />\n    </div>\n  );\n};\n\nclass Canvas extends React.Component {\n  componentDidMount() {\n    this.ctx = this.canvas.getContext(\"2d\");\n\n    this.scale();\n    this.props.draw(this.canvas, this.ctx);\n  }\n\n  scale = () => {\n    const ratio = window.devicePixelRatio || 1;\n\n    this.canvas.width = this.props.width * ratio;\n    this.canvas.height = this.props.height * ratio;\n\n    this.canvas.style.width = `${this.props.width}px`;\n    this.canvas.style.height = `${this.props.height}px`;\n\n    this.ctx.scale(ratio, ratio);\n  };\n\n  render() {\n    const { width, height } = this.props;\n    return (\n      <canvas\n        ref={(node) => (this.canvas = node)}\n        width={width}\n        height={height}\n      />\n    );\n  }\n}\n"],"sourceRoot":""}
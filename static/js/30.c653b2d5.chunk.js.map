{"version":3,"sources":["exp/Exp21.js"],"names":["Thing","ref","useRef","data","useMemo","extensions","side","THREE","uniforms","time","type","value","resolution","uvRate1","transparent","fragmentShader","vertexShader","depthWrite","depthTest","blending","position","Float32Array","count","i","j","set","refMaterial","refGeo","useFrame","state","current","setAttribute","clock","getElapsedTime","attach","dark","useContext","ThemeContext","style","width","height","cursor","background","transition","camera","fov"],"mappings":"qIAAA,4DAqLA,SAASA,IA8BP,IA7BA,IAAMC,EAAMC,mBAENC,EAAOC,mBACX,iBAAO,CACLC,WAAY,kDACZC,KAAMC,aACNC,SAAU,CACRC,KAAM,CAAEC,KAAM,IAAKC,MAAO,GAC1BC,WAAY,CAAEF,KAAM,KAAMC,MAAO,IAAIJ,WACrCM,QAAS,CACPF,MAAO,IAAIJ,UAAc,EAAG,KAGhCO,aAAa,EACbC,eA9Lc,gSA+LdC,aAnLY,muLAoLZC,YAAY,EACZC,WAAW,EACXC,SAAUZ,sBAEZ,IAOEa,EAAW,IAAIC,aAAaC,KAEvBC,EAAI,EAAGA,EALJ,IAKeA,IACzB,IAAK,IAAIC,EAAI,EAAGA,EANN,IAMiBA,IACzBJ,EAASK,IACP,CAAqB,IAAnBF,EARI,IAQQ,IAA+B,IAAnBC,EARpB,IAQgC,IAAW,GACjD,GATM,IASOD,EAAIC,IAKvB,IAAME,EAAcxB,mBACdyB,EAASzB,mBAaf,OAXA0B,aAAS,SAACC,GAERF,EAAOG,QAAQC,aACb,WACA,IAAIxB,kBAAsBa,EAAU,IAItCM,EAAYI,QAAQtB,SAASC,KAAKE,MAAQkB,EAAMG,MAAMC,oBAItD,4BAAQhC,IAAKA,GACX,oCAAgBiC,OAAO,WAAWjC,IAAK0B,IACvC,kDAAgBO,OAAO,WAAWjC,IAAKyB,GAAiBvB,KAK/C,qBAAO,IACZgC,EAASC,qBAAWC,KAApBF,KAER,OACE,yBACEG,MAAO,CACLC,MAAO,OACPC,OAAQ,QACRC,OAAQ,UACRC,WAAYP,EACR,0BACA,2BACJQ,WAAY,qBAGd,kBAAC,IAAD,CAAQC,OAAQ,CAAEC,IAAK,GAAIzB,SAAU,CAAC,GAAI,IAAM,MAC9C,kBAACpB,EAAD,MACA,kBAAC,IAAD","file":"static/js/30.c653b2d5.chunk.js","sourcesContent":["import * as THREE from \"three\";\nimport React, { useRef, useMemo, useContext } from \"react\";\nimport { Canvas, useFrame } from \"react-three-fiber\";\nimport { TrackballControls } from \"drei\";\nimport ThemeContext from \"../context/ThemeContext\";\n\nconst fragmentShader = `\nuniform float time;\nuniform float progress;\nuniform float vProgress;\nvarying vec4 vPosition;\n\n  void main() {\n    float dist = length(gl_PointCoord - vec2(0.5));\n    float alpha = 1. - smoothstep(0.45,0.5,dist);\n    gl_FragColor = vec4(1.,1.,1.,alpha*0.5 + 0.5*vProgress);\n}`;\n\nconst vertexShader = `\n  uniform float time;\n\n//\tClassic Perlin 3D Noise\n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec4 fade(vec4 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec4 P){\n  vec4 Pi0 = floor(P); // Integer part for indexing\n  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = vec4(Pi0.zzzz);\n  vec4 iz1 = vec4(Pi1.zzzz);\n  vec4 iw0 = vec4(Pi0.wwww);\n  vec4 iw1 = vec4(Pi1.wwww);\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n  vec4 ixy00 = permute(ixy0 + iw0);\n  vec4 ixy01 = permute(ixy0 + iw1);\n  vec4 ixy10 = permute(ixy1 + iw0);\n  vec4 ixy11 = permute(ixy1 + iw1);\n\n  vec4 gx00 = ixy00 / 7.0;\n  vec4 gy00 = floor(gx00) / 7.0;\n  vec4 gz00 = floor(gy00) / 6.0;\n  gx00 = fract(gx00) - 0.5;\n  gy00 = fract(gy00) - 0.5;\n  gz00 = fract(gz00) - 0.5;\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n  vec4 sw00 = step(gw00, vec4(0.0));\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\n\n  vec4 gx01 = ixy01 / 7.0;\n  vec4 gy01 = floor(gx01) / 7.0;\n  vec4 gz01 = floor(gy01) / 6.0;\n  gx01 = fract(gx01) - 0.5;\n  gy01 = fract(gy01) - 0.5;\n  gz01 = fract(gz01) - 0.5;\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n  vec4 sw01 = step(gw01, vec4(0.0));\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\n\n  vec4 gx10 = ixy10 / 7.0;\n  vec4 gy10 = floor(gx10) / 7.0;\n  vec4 gz10 = floor(gy10) / 6.0;\n  gx10 = fract(gx10) - 0.5;\n  gy10 = fract(gy10) - 0.5;\n  gz10 = fract(gz10) - 0.5;\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n  vec4 sw10 = step(gw10, vec4(0.0));\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\n\n  vec4 gx11 = ixy11 / 7.0;\n  vec4 gy11 = floor(gx11) / 7.0;\n  vec4 gz11 = floor(gy11) / 6.0;\n  gx11 = fract(gx11) - 0.5;\n  gy11 = fract(gy11) - 0.5;\n  gz11 = fract(gz11) - 0.5;\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n  vec4 sw11 = step(gw11, vec4(0.0));\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\n\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\n\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n  g0000 *= norm00.x;\n  g0100 *= norm00.y;\n  g1000 *= norm00.z;\n  g1100 *= norm00.w;\n\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n  g0001 *= norm01.x;\n  g0101 *= norm01.y;\n  g1001 *= norm01.z;\n  g1101 *= norm01.w;\n\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n  g0010 *= norm10.x;\n  g0110 *= norm10.y;\n  g1010 *= norm10.z;\n  g1110 *= norm10.w;\n\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n  g0011 *= norm11.x;\n  g0111 *= norm11.y;\n  g1011 *= norm11.z;\n  g1111 *= norm11.w;\n\n  float n0000 = dot(g0000, Pf0);\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\n  float n1111 = dot(g1111, Pf1);\n\n  vec4 fade_xyzw = fade(Pf0);\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n  return 2.2 * n_xyzw;\n}\n\n\n  void main() {\n    vec3 newpos = position;\n\n    // infinite\n    newpos.y -= mod(time,3.);\n    float progress = smoothstep(-1.,5.,newpos.y);\n\n    newpos.z += progress*-newpos.y*newpos.y*newpos.y;\n\n    // wave noise\n    // newpos.z += cnoise(vec4(position, time));\n\n\n    vec4 mvPosition = modelViewMatrix * vec4(newpos/10., 1.);\n    gl_PointSize = 5. * (1. / - mvPosition.z);\n    gl_Position = projectionMatrix * mvPosition;\n  }\n`;\n\nfunction Thing() {\n  const ref = useRef();\n\n  const data = useMemo(\n    () => ({\n      extensions: \"#extension GL_OES_standard_derivatives : enable\",\n      side: THREE.DoubleSide,\n      uniforms: {\n        time: { type: \"f\", value: 0 },\n        resolution: { type: \"v4\", value: new THREE.Vector4() },\n        uvRate1: {\n          value: new THREE.Vector2(1, 1),\n        },\n      },\n      transparent: true,\n      fragmentShader,\n      vertexShader,\n      depthWrite: false,\n      depthTest: false,\n      blending: THREE.AdditiveBlending,\n    }),\n    []\n  );\n\n  // count\n  let count = 100;\n\n  // attributes\n  let position = new Float32Array(count * count * 3);\n\n  for (let i = 0; i < count; i++) {\n    for (let j = 0; j < count; j++) {\n      position.set(\n        [(i / count - 0.5) * 20, (j / count - 0.5) * 20, 0],\n        3 * (count * i + j)\n      );\n    }\n  }\n\n  const refMaterial = useRef();\n  const refGeo = useRef();\n\n  useFrame((state) => {\n    // Geo\n    refGeo.current.setAttribute(\n      \"position\",\n      new THREE.BufferAttribute(position, 3)\n    );\n\n    // Material\n    refMaterial.current.uniforms.time.value = state.clock.getElapsedTime();\n  });\n\n  return (\n    <points ref={ref}>\n      <bufferGeometry attach=\"geometry\" ref={refGeo} />\n      <shaderMaterial attach=\"material\" ref={refMaterial} {...data} />\n    </points>\n  );\n}\n\nexport default () => {\n  const { dark } = useContext(ThemeContext);\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        cursor: \"pointer\",\n        background: dark\n          ? \"RGBA(34, 63, 134, 1.00)\"\n          : \"RGBA(110, 181, 87, 1.00)\",\n        transition: \"background 200ms\",\n      }}\n    >\n      <Canvas camera={{ fov: 65, position: [0, -0.5, -0.1] }}>\n        <Thing />\n        <TrackballControls />\n      </Canvas>\n    </div>\n  );\n};\n"],"sourceRoot":""}
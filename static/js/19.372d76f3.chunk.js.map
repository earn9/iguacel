{"version":3,"sources":["exp/comp/CanvasId.js","exp/Exp16.js","hooks/useRaf.js"],"names":["width","height","draw","canvasRef","useRef","useEffect","canvas","current","ctx","getContext","ratio","window","devicePixelRatio","style","scale","border","ref","React","useState","count","setCount","onFrame","requestRef","startTimeRef","callback","time","progress","requestAnimationFrame","cancelAnimationFrame","useRaf","display","justifyContent","alignItems","fillStyle","arc","WIDTH","HEIGHT","Math","abs","cos","PI","fill","strokeStyle","strokeRect","fillRect","animation"],"mappings":"uKAEe,cAA8B,IAA3BA,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAC3BC,EAAYC,mBAuBhB,OATAC,qBAAU,WACR,IAAMC,EAASH,EAAUI,QACnBC,EAAMF,EAAOG,WAAW,OAdlB,SAACH,EAAQE,GACrB,IAAME,EAAQC,OAAOC,kBAAoB,EAEzCN,EAAON,MAAQA,EAAQU,EACvBJ,EAAOL,OAASA,EAASS,EAEzBJ,EAAOO,MAAMb,MAAb,UAAwBA,EAAxB,MACAM,EAAOO,MAAMZ,OAAb,UAAyBA,EAAzB,MAEAO,EAAIM,MAAMJ,EAAOA,GAOjBI,CAAMR,EAAQE,GACdN,EAAKI,EAAQE,MAKb,4BAAQK,MAAO,CAAEE,OAAQ,mBACvBC,IAAKb,EACLH,MAAOA,EACPC,OAAQA,KC1BC,qBACb,IADmB,EAIOgB,IAAMC,SAAS,GAJtB,mBAIZC,EAJY,KAILC,EAJK,MCFN,SAACC,GACd,IAAMC,EAAalB,mBACbmB,EAAenB,mBACfoB,EAAW,SAAXA,EAAYC,GACXF,EAAahB,UAChBgB,EAAahB,QAAUkB,GACzB,IAAMC,EAAWD,EAAOF,EAAahB,QACrCc,EAAQK,GACRJ,EAAWf,QAAUoB,sBAAsBH,IAG7CnB,qBAAU,WAER,OADAiB,EAAWf,QAAUoB,sBAAsBH,GACpC,kBAAMI,qBAAqBN,EAAWf,YAC5C,IDPHsB,EAAO,SAAAH,GAAQ,OAAIN,EAASM,EAAW,QAmBvC,OACE,yBACEb,MAAO,CACLb,MAAO,OACPC,OAAQ,QACR6B,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGd,kBAAC,EAAD,CACEhC,MAlCQ,IAmCRC,OAlCS,IAmCTC,KAAM,SAACI,EAAQE,GAAT,OA9BM,SAACF,EAAQE,GACzBA,EAAIyB,UAAY,OAChBzB,EAAI0B,IACFC,IACAC,IACCD,IAAaE,KAAKC,IAAID,KAAKE,IAAIpB,IAChC,EACA,EAAIkB,KAAKG,IAEXhC,EAAIiC,OAEJjC,EAAIyB,UAAY,SAChBzB,EAAIkC,YAAc,SAClBlC,EAAImC,WAAW,EAAG,EAnBN,IACC,KAmBbnC,EAAIoC,SAAST,GAAgBC,GAAiB,GAAI,IAgBvBS,CAAUvC,EAAQE","file":"static/js/19.372d76f3.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\n\nexport default ({ width, height, draw }) => {\n  let canvasRef = useRef();\n\n  const scale = (canvas, ctx) => {\n    const ratio = window.devicePixelRatio || 1;\n\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    ctx.scale(ratio, ratio);\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    scale(canvas, ctx);\n    draw(canvas, ctx);\n\n  })\n\n  return (\n    <canvas style={{ border: \"1px solid white\" }}\n      ref={canvasRef}\n      width={width}\n      height={height}\n    />\n  );\n}","import React from \"react\";\nimport Canvas from \"./comp/CanvasId.js\";\nimport useRaf from \"../hooks/useRaf\";\n\nexport default () => {\n  const WIDTH = 200;\n  const HEIGHT = 200;\n\n  const [count, setCount] = React.useState(0)\n  useRaf(progress => setCount(progress / 300));\n\n  const animation = (canvas, ctx) => {\n    ctx.fillStyle = 'gold';\n    ctx.arc(\n      WIDTH / 2,\n      HEIGHT / 2,\n      (WIDTH / 2) * Math.abs(Math.cos(count)),\n      0,\n      2 * Math.PI\n    );\n    ctx.fill();\n\n    ctx.fillStyle = \"tomato\";\n    ctx.strokeStyle = \"tomato\";\n    ctx.strokeRect(0, 0, WIDTH, HEIGHT);\n    ctx.fillRect(WIDTH / 2 - 10, HEIGHT / 2 - 10, 20, 20);\n  }\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Canvas\n        width={WIDTH}\n        height={HEIGHT}\n        draw={(canvas, ctx) => animation(canvas, ctx)}\n      />\n    </div>\n  );\n};","import React, { useRef, useEffect } from 'react';\n\nexport default (onFrame) => {\n  const requestRef = useRef();\n  const startTimeRef = useRef();\n  const callback = (time) => {\n    if (!startTimeRef.current)\n      startTimeRef.current = time;\n    const progress = time - startTimeRef.current;\n    onFrame(progress);\n    requestRef.current = requestAnimationFrame(callback);\n  }\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(callback);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []);\n}"],"sourceRoot":""}
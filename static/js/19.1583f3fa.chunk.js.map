{"version":3,"sources":["exp/Exp16.js"],"names":["style","width","height","display","justifyContent","alignItems","Kanvas","draw","canvas","ctx","fillStyle","strokeStyle","strokeRect","fillRect","WIDTH","HEIGHT","canvasRef","useRef","useEffect","current","getContext","console","log","ratio","window","devicePixelRatio","scale","border","ref","React","Component"],"mappings":"oMAEe,qBAIb,OACE,yBACEA,MAAO,CACLC,MAAO,OACPC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAGd,kBAACC,EAAD,CACEL,MAdQ,IAeRC,OAdS,IAeTK,KAAM,SAACC,EAAQC,GACbA,EAAIC,UAAY,SAChBD,EAAIE,YAAc,SAClBF,EAAIG,WAAW,EAAG,EAnBZ,IACC,KAmBPH,EAAII,SAASC,GAAgBC,GAAiB,GAAI,SAO5D,IAAMT,EAAS,SAAC,GAA6B,IAA3BL,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,OAAQK,EAAW,EAAXA,KAC3BS,EAAYC,mBAuBhB,OAPAC,qBAAU,WACR,IAAMV,EAASQ,EAAUG,QACnBV,EAAMD,EAAOY,WAAW,OAhBlB,SAACZ,EAAQC,GACrBY,QAAQC,IAAId,GAEZ,IAAMe,EAAQC,OAAOC,kBAAoB,EAEzCjB,EAAOP,MAAQA,EAAQsB,EACvBf,EAAON,OAASA,EAASqB,EAEzBf,EAAOR,MAAMC,MAAb,UAAwBA,EAAxB,MACAO,EAAOR,MAAME,OAAb,UAAyBA,EAAzB,MAEAO,EAAIiB,MAAMH,EAAOA,GAMjBG,CAAMlB,EAAQC,GACdF,EAAKC,EAAQC,MAIb,4BAAQT,MAAO,CAAE2B,OAAQ,mBACvBC,IAAKZ,EACLf,MAAOA,EACPC,OAAQA,KAOO2B,IAAMC","file":"static/js/19.1583f3fa.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\n\nexport default () => {\n  const WIDTH = 200;\n  const HEIGHT = 200;\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Kanvas\n        width={WIDTH}\n        height={HEIGHT}\n        draw={(canvas, ctx) => {\n          ctx.fillStyle = \"tomato\";\n          ctx.strokeStyle = \"tomato\";\n          ctx.strokeRect(0, 0, WIDTH, HEIGHT);\n          ctx.fillRect(WIDTH / 2 - 10, HEIGHT / 2 - 10, 20, 20);\n        }}\n      />\n    </div>\n  );\n};\n\nconst Kanvas = ({ width, height, draw }) => {\n  let canvasRef = useRef();\n\n  const scale = (canvas, ctx) => {\n    console.log(canvas);\n\n    const ratio = window.devicePixelRatio || 1;\n\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n\n    ctx.scale(ratio, ratio);\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    scale(canvas, ctx);\n    draw(canvas, ctx);\n  })\n\n  return (\n    <canvas style={{ border: \"1px solid white\" }}\n      ref={canvasRef}\n      width={width}\n      height={height}\n    />\n  );\n}\n\n\n\nclass Canvas extends React.Component {\n  componentDidMount() {\n    this.ctx = this.canvas.getContext(\"2d\");\n\n    this.scale();\n    this.props.draw(this.canvas, this.ctx);\n  }\n\n  scale = () => {\n    console.log(this.canvas);\n\n    const ratio = window.devicePixelRatio || 1;\n\n    this.canvas.width = this.props.width * ratio;\n    this.canvas.height = this.props.height * ratio;\n\n    this.canvas.style.width = `${this.props.width}px`;\n    this.canvas.style.height = `${this.props.height}px`;\n\n    this.ctx.scale(ratio, ratio);\n  };\n\n  render() {\n    const { width, height } = this.props;\n\n    return (\n      <canvas\n        ref={node => this.canvas = node}\n        width={width}\n        height={height}\n      />\n    );\n  }\n}\n"],"sourceRoot":""}
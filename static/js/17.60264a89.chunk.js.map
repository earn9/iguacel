{"version":3,"sources":["exp/Exp14.js"],"names":["ref","useRef","useEffect","requestId","canvas","current","ctx","getContext","ratio","window","devicePixelRatio","canvasWidth","getComputedStyle","getPropertyValue","slice","canvasHeight","style","width","height","i","animation","clearRect","beginPath","arc","Math","abs","cos","PI","fillStyle","fill","font","fillText","requestAnimationFrame","cancelAnimationFrame","display","justifyContent","alignItems","border"],"mappings":"qIAAA,2BAIe,qBACb,IAAIA,EAAMC,mBAmDV,OAjDAC,qBAAU,WACR,IAcIC,EAdAC,EAASJ,EAAIK,QACbC,EAAMF,EAAOG,WAAW,MAExBC,EAAQC,OAAOC,kBAAoB,EACnCC,EAAcC,iBAAiBR,GAChCS,iBAAiB,SACjBC,MAAM,GAAI,GAAKN,EACdO,EAAeH,iBAAiBR,GACjCS,iBAAiB,UACjBC,MAAM,GAAI,GAAKN,EAElBJ,EAAOY,MAAMC,MAAb,UAAwBN,EAAxB,MACAP,EAAOY,MAAME,OAAb,UAAyBH,EAAzB,MAGA,IAAII,EAAI,EA4BR,OA1BkB,SAAZC,IACJd,EAAIe,UAAU,EAAG,EAAGjB,EAAOa,MAAOb,EAAOc,QACzCZ,EAAIgB,YACJhB,EAAIiB,IACFnB,EAAOa,MAAQ,EACfb,EAAOc,OAAS,EACfd,EAAOa,MAAQ,EAAKO,KAAKC,IAAID,KAAKE,IAAIP,IACvC,EACA,EAAIK,KAAKG,IAGXrB,EAAIsB,UAAY,MAChBtB,EAAIuB,OAEJvB,EAAIwB,KAAO,aACXxB,EAAIsB,UAAY,QAChBtB,EAAIyB,SAAS,aAAc3B,EAAOa,MAAQ,EAAGb,EAAOc,OAAS,GAC7DZ,EAAIyB,SAAS,aAAc3B,EAAOa,MAAQ,EAAGb,EAAOc,OAAS,EAAI,IACjEZ,EAAIyB,SAAS,aAAc3B,EAAOa,MAAQ,EAAGb,EAAOc,OAAS,EAAI,IAEjEC,GAAK,IACLhB,EAAY6B,sBAAsBZ,GAGpCA,GAEO,WACLa,qBAAqB9B,OAKvB,yBAAKa,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAASgB,QAAS,OAAQC,eAAgB,SAAUC,WAAY,WACnG,4BAAQnB,MAAO,IAAKC,OAAQ,IAC1BlB,IAAKA,EACLgB,MAAO,CAAEqB,OAAQ","file":"static/js/17.60264a89.chunk.js","sourcesContent":["import React from 'react';\nimport { useEffect } from 'react';\nimport { useRef } from 'react';\n\nexport default () => {\n  let ref = useRef();\n\n  useEffect(() => {\n    let canvas = ref.current;\n    let ctx = canvas.getContext('2d');\n\n    let ratio = window.devicePixelRatio || 1;\n    let canvasWidth = getComputedStyle(canvas)\n      .getPropertyValue('width')\n      .slice(0, -2) * ratio;\n    let canvasHeight = getComputedStyle(canvas)\n      .getPropertyValue('height')\n      .slice(0, -2) * ratio;\n\n    canvas.style.width = `${canvasWidth}px`;\n    canvas.style.height = `${canvasHeight}px`;\n\n    let requestId;\n    let i = 0;\n\n    const animation = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.beginPath();\n      ctx.arc(\n        canvas.width / 2,\n        canvas.height / 2,\n        (canvas.width / 2) * Math.abs(Math.cos(i)),\n        0,\n        2 * Math.PI\n      );\n\n      ctx.fillStyle = 'red';\n      ctx.fill();\n\n      ctx.font = \"10px Inter\";\n      ctx.fillStyle = 'white';\n      ctx.fillText(\"Canvas txt\", canvas.width / 2, canvas.height / 2);\n      ctx.fillText(\"pixelRatio\", canvas.width / 2, canvas.height / 2 + 40);\n      ctx.fillText(\"pixelRatio\", canvas.width / 2, canvas.height / 2 + 80);\n\n      i += 0.01;\n      requestId = requestAnimationFrame(animation);\n    };\n\n    animation();\n\n    return () => {\n      cancelAnimationFrame(requestId);\n    };\n  });\n\n  return (\n    <div style={{ width: \"100%\", height: \"100vh\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }}>\n      <canvas width={500} height={500}\n        ref={ref}\n        style={{ border: \"1px solid gold\" }}\n      />\n    </div>\n  );\n};\n"],"sourceRoot":""}
{"version":3,"sources":["exp/Exp17.js"],"names":["style","width","height","display","justifyContent","alignItems","Canvas","useState","setWidth","setHeight","pixelRatio","window","devicePixelRatio","ref","useRef","canvas","useEffect","current","clientWidth","clientHeight","useLayoutEffect","ctx","getContext","fillStyle","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","strokeRect","fillRect","displayWidth","Math","floor","displayHeight","border"],"mappings":"uKAGe,qBAIb,OACE,yBACEA,MAAO,CACLC,MAAO,OACPC,OAAQ,QACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,WAgBd,kBAACC,EAAD,QAKN,IAeMA,EAAS,WAAO,IAAD,EACOC,mBAAS,GADhB,mBACZN,EADY,KACLO,EADK,OAESD,mBAAS,GAFlB,mBAEZL,EAFY,KAEJO,EAFI,KAGbC,EAAaC,OAAOC,iBACpBC,EAAMC,iBAAO,MACbC,EAASD,iBAAO,MAGtBE,qBAAU,WACRR,EAASK,EAAII,QAAQC,aACrBT,EAAUI,EAAII,QAAQE,gBACrB,IAEHC,2BAAgB,WACd,IAAMC,EAAMN,EAAOE,QAAQK,WAAW,MAGtCD,EAAIE,UAAY,SAChBF,EAAIG,YAAc,SAElBH,EAAII,YACJJ,EAAIK,OAAO,EAAGxB,EAAS,GACvBmB,EAAIM,OAAO1B,EAAOC,EAAS,GAE3BmB,EAAIK,OAAOzB,EAAQ,EAAG,GACtBoB,EAAIM,OAAO1B,EAAQ,EAAGC,GACtBmB,EAAIO,YAEJP,EAAIQ,SAEJR,EAAIS,WAAW,EAAG,EAAG7B,EAAOC,GAC5BmB,EAAIU,SAAS9B,EAAQ,EAAI,GAAIC,EAAS,EAAI,GAAI,GAAI,MAEjD,CAACD,EAAOC,IAEX,IAAM8B,EAAeC,KAAKC,MAAMxB,EAAaT,GACvCkC,EAAgBF,KAAKC,MAAMxB,EAAaR,GACxCF,EAAQ,CAAEC,QAAOC,UAEvB,OACE,yBAAKF,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQkC,OAAQ,mBAAqBvB,IAAKA,GAC7E,4BACEA,IAAKE,EACLd,MAAO+B,EACP9B,OAAQiC,EACRnC,MAAOA","file":"static/js/20.bedf61c5.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useLayoutEffect } from 'react';\n\n\nexport default () => {\n  const WIDTH = 200;\n  const HEIGHT = 200;\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      {/* <Kanvas\n        width={WIDTH}\n        height={HEIGHT}\n        draw={(canvas, ctx) => {\n          console.log(canvas);\n\n          ctx.fillStyle = \"tomato\";\n          ctx.strokeStyle = \"tomato\";\n          ctx.strokeRect(0, 0, WIDTH, HEIGHT);\n          ctx.fillRect(WIDTH / 2 - 10, HEIGHT / 2 - 10, 20, 20);\n        }}\n      /> */}\n\n      <Canvas />\n    </div>\n  );\n};\n\nconst Kanvas = ({ width, height, draw }) => {\n  let canvas = useRef();\n\n\n  return (\n    <canvas style={{ border: \"1px solid white\" }}\n      ref={canvas}\n      width={width}\n      height={height}\n    />\n  );\n}\n\n\n\nconst Canvas = () => {\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const pixelRatio = window.devicePixelRatio;\n  const ref = useRef(null);\n  const canvas = useRef(null);\n\n  // responsive width and height\n  useEffect(() => {\n    setWidth(ref.current.clientWidth);\n    setHeight(ref.current.clientHeight);\n  }, []);\n\n  useLayoutEffect(() => {\n    const ctx = canvas.current.getContext('2d');\n\n    // some canvas stuff..\n    ctx.fillStyle = \"tomato\";\n    ctx.strokeStyle = \"tomato\";\n\n    ctx.beginPath()\n    ctx.moveTo(0, height / 2)\n    ctx.lineTo(width, height / 2)\n\n    ctx.moveTo(width / 2, 0)\n    ctx.lineTo(width / 2, height)\n    ctx.closePath();\n\n    ctx.stroke()\n\n    ctx.strokeRect(0, 0, width, height);\n    ctx.fillRect(width / 2 - 10, height / 2 - 10, 20, 20);\n\n  }, [width, height]);\n\n  const displayWidth = Math.floor(pixelRatio * width);\n  const displayHeight = Math.floor(pixelRatio * height);\n  const style = { width, height };\n\n  return (\n    <div style={{ width: '100%', height: '100%', border: \"1px solid white\" }} ref={ref}>\n      <canvas\n        ref={canvas}\n        width={displayWidth}\n        height={displayHeight}\n        style={style}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}